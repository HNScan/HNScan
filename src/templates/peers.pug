extends layouts/layout

//- XXX Needs pagination
block content
  .contentContainer
    .mapWrapper
      h1.peersHeader Peers
      #map
    .statsWrapper
      .card.summaryCard
        header.card-header
          p.card-header-title Peers
        if peers.length <= 0
          .emptyStateContainer
            .emtpyStateHeader No Peers
            .emptyStateSubheader There are no peers connected to this network
        else
          each peer in peers
            .summaryCardItem(id=peer.addr.split(':')[0])
              .summaryCardBlock
                .columns
                  .column
                    .stacked
                      .stackedLabel Address
                      .stackedElement=peer.addr
                    .stacked
                      .stackedLabel Name
                      if peer.name
                        .stackedElement=peer.name
                      else
                        .stackedElement N/A
                    .stacked
                      .stackedLabel Services
                      .stackedElement=peer.services
                    .stacked
                      .stackedLabel Version
                      .stackedElement=peer.version
                  .column
                    .stacked
                      .stackedLabel Location
                      .stackedElement(id="location-" + peer.addr.split(':')[0])
                    .stacked
                      .stackedLabel Country
                      .stackedElement(id="country-" + peer.addr.split(':')[0])
                    .stacked
                      .stackedLabel Whitelisted
                      .stackedElement=peer.whitelisted ? 'Yes' : 'No'
                    .stacked
                      .stackedLabel Last Send / Last Received
                      if (peer.lastsend && peer.lastrecv)
                        .stackedElement
                          =timeAgo(peer.lastsend) + " / " + timeAgo(peer.lastrecv)
                      else
                        .stackedElement N/A
  //- Could be added to its own file
  script(
    src='https://unpkg.com/leaflet@1.3.4/dist/leaflet.js',
    integrity='sha512-nMMmRyTVoLYqjP9hrbed9S+FzjZHW5gY1TWCHA5ckwXZBadntCNs8kEqAWdrb9O7rxbCaA4lKTIWjDXZxflOcA==',
    crossorigin=''
  )
  script.
    var peers = !{ JSON.stringify(peers).replace(/<\//g, '<\\/') }

    // Initialize map for peers
    var map = L.map("map").setView([45, -50], 1.5);
    L.tileLayer(
      "https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}",
      {
        attribution:
          'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
        maxZoom: 18,
        id: "mapbox.streets",
        accessToken:
          "pk.eyJ1Ijoic2hhbmVqYW5uIiwiYSI6ImNqb3dqbDM2NjF1bGczb3MwYXp4dnp3c2EifQ.RKRrzIoWNE2OvVpfmSrjeQ"
      }
    ).addTo(map);

    requestGeolocation(peers);
    
    /* Free Plan */
    function requestGeolocation(peers) {
      var url, coords, xmlHttp, ips;
      if (!peers.length) {
        return;
      }
      // extract ips from array of objects
      ips = peers.map(function(el) {
        return el.addr.split(':')[0]
      })
      for(var ip of ips) {
        xmlHttp = new XMLHttpRequest();
        url = `https://api.ipgeolocation.io/ipgeo?apiKey=0fcc7a37c67c4519a2c5e3c84dccf9c6&ip=${ip}&fields=geo`;
        // XXX This is REALLY bad...If more than 10 peers appear, this will get really slow...
        xmlHttp.open("GET", url, false);
        xmlHttp.onreadystatechange = function() { 
          if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
            var response = JSON.parse(xmlHttp.responseText)
            coords = [response.latitude, response.longitude];
            addMarkers(response, coords);
            applyGeolocation(response);
          }
        }
        xmlHttp.setRequestHeader('Content-Type', 'application/json');
        xmlHttp.send();
      }
    }

    function addMarkers(geo, coords) {
      var marker = L.marker(coords, {
        title: geo.ip
      }).addTo(map).on('click', markerTooltip)
    }

    function markerTooltip(e) {
      var el = document.getElementById(e.target.options.title);
      el.scrollIntoView();
    }

    function applyGeolocation(geo) {
      var location = document.getElementById("location-" + geo.ip);
      var country = document.getElementById("country-" + geo.ip);
      location.innerHTML = geo.city + ", " + geo.state_prov;
      country.innerHTML = geo.country_name;
    }
